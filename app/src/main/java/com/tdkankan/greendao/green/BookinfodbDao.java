package com.tdkankan.greendao.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tdkankan.greendao.model.Bookinfodb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOKINFODB".
*/
public class BookinfodbDao extends AbstractDao<Bookinfodb, Long> {

    public static final String TABLENAME = "BOOKINFODB";

    /**
     * Properties of entity Bookinfodb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Bookid = new Property(0, Long.class, "bookid", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Author = new Property(2, String.class, "author", false, "AUTHOR");
        public final static Property Link = new Property(3, String.class, "link", false, "LINK");
        public final static Property Piclink = new Property(4, String.class, "piclink", false, "PICLINK");
        public final static Property Info = new Property(5, String.class, "info", false, "INFO");
        public final static Property Lasttime = new Property(6, String.class, "lasttime", false, "LASTTIME");
        public final static Property Newchapter = new Property(7, String.class, "newchapter", false, "NEWCHAPTER");
        public final static Property Newchapterlink = new Property(8, String.class, "newchapterlink", false, "NEWCHAPTERLINK");
        public final static Property Chapternum = new Property(9, int.class, "chapternum", false, "CHAPTERNUM");
        public final static Property Linkfrom = new Property(10, String.class, "linkfrom", false, "LINKFROM");
    }


    public BookinfodbDao(DaoConfig config) {
        super(config);
    }
    
    public BookinfodbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOKINFODB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: bookid
                "\"NAME\" TEXT," + // 1: name
                "\"AUTHOR\" TEXT," + // 2: author
                "\"LINK\" TEXT," + // 3: link
                "\"PICLINK\" TEXT," + // 4: piclink
                "\"INFO\" TEXT," + // 5: info
                "\"LASTTIME\" TEXT," + // 6: lasttime
                "\"NEWCHAPTER\" TEXT," + // 7: newchapter
                "\"NEWCHAPTERLINK\" TEXT," + // 8: newchapterlink
                "\"CHAPTERNUM\" INTEGER NOT NULL ," + // 9: chapternum
                "\"LINKFROM\" TEXT);"); // 10: linkfrom
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOKINFODB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bookinfodb entity) {
        stmt.clearBindings();
 
        Long bookid = entity.getBookid();
        if (bookid != null) {
            stmt.bindLong(1, bookid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(4, link);
        }
 
        String piclink = entity.getPiclink();
        if (piclink != null) {
            stmt.bindString(5, piclink);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String lasttime = entity.getLasttime();
        if (lasttime != null) {
            stmt.bindString(7, lasttime);
        }
 
        String newchapter = entity.getNewchapter();
        if (newchapter != null) {
            stmt.bindString(8, newchapter);
        }
 
        String newchapterlink = entity.getNewchapterlink();
        if (newchapterlink != null) {
            stmt.bindString(9, newchapterlink);
        }
        stmt.bindLong(10, entity.getChapternum());
 
        String linkfrom = entity.getLinkfrom();
        if (linkfrom != null) {
            stmt.bindString(11, linkfrom);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bookinfodb entity) {
        stmt.clearBindings();
 
        Long bookid = entity.getBookid();
        if (bookid != null) {
            stmt.bindLong(1, bookid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(3, author);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(4, link);
        }
 
        String piclink = entity.getPiclink();
        if (piclink != null) {
            stmt.bindString(5, piclink);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(6, info);
        }
 
        String lasttime = entity.getLasttime();
        if (lasttime != null) {
            stmt.bindString(7, lasttime);
        }
 
        String newchapter = entity.getNewchapter();
        if (newchapter != null) {
            stmt.bindString(8, newchapter);
        }
 
        String newchapterlink = entity.getNewchapterlink();
        if (newchapterlink != null) {
            stmt.bindString(9, newchapterlink);
        }
        stmt.bindLong(10, entity.getChapternum());
 
        String linkfrom = entity.getLinkfrom();
        if (linkfrom != null) {
            stmt.bindString(11, linkfrom);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Bookinfodb readEntity(Cursor cursor, int offset) {
        Bookinfodb entity = new Bookinfodb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bookid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // author
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // link
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // piclink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // info
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lasttime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // newchapter
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // newchapterlink
            cursor.getInt(offset + 9), // chapternum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // linkfrom
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bookinfodb entity, int offset) {
        entity.setBookid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPiclink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInfo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLasttime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNewchapter(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNewchapterlink(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChapternum(cursor.getInt(offset + 9));
        entity.setLinkfrom(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bookinfodb entity, long rowId) {
        entity.setBookid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bookinfodb entity) {
        if(entity != null) {
            return entity.getBookid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Bookinfodb entity) {
        return entity.getBookid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
